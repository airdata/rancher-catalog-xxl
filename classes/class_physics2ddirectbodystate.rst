.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Physics2DDirectBodyState.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Physics2DDirectBodyState:

Physics2DDirectBodyState
========================

**Inherits:** :ref:`Object<class_object>`

**Inherited By:** :ref:`Physics2DDirectBodyStateSW<class_physics2ddirectbodystatesw>`

**Category:** Core

Brief Description
-----------------

Direct access object to a physics body in the :ref:`Physics2DServer<class_physics2dserver>`.

Member Functions
----------------

+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`RID<class_rid>`                                              | :ref:`get_contact_collider<class_Physics2DDirectBodyState_get_contact_collider>` **(** :ref:`int<class_int>` contact_idx **)** const                                           |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                              | :ref:`get_contact_collider_id<class_Physics2DDirectBodyState_get_contact_collider_id>` **(** :ref:`int<class_int>` contact_idx **)** const                                     |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_object>`                                        | :ref:`get_contact_collider_object<class_Physics2DDirectBodyState_get_contact_collider_object>` **(** :ref:`int<class_int>` contact_idx **)** const                             |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_vector2>`                                      | :ref:`get_contact_collider_position<class_Physics2DDirectBodyState_get_contact_collider_position>` **(** :ref:`int<class_int>` contact_idx **)** const                         |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                              | :ref:`get_contact_collider_shape<class_Physics2DDirectBodyState_get_contact_collider_shape>` **(** :ref:`int<class_int>` contact_idx **)** const                               |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_variant>`                                      | :ref:`get_contact_collider_shape_metadata<class_Physics2DDirectBodyState_get_contact_collider_shape_metadata>` **(** :ref:`int<class_int>` contact_idx **)** const             |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_vector2>`                                      | :ref:`get_contact_collider_velocity_at_position<class_Physics2DDirectBodyState_get_contact_collider_velocity_at_position>` **(** :ref:`int<class_int>` contact_idx **)** const |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                              | :ref:`get_contact_count<class_Physics2DDirectBodyState_get_contact_count>` **(** **)** const                                                                                   |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_vector2>`                                      | :ref:`get_contact_local_normal<class_Physics2DDirectBodyState_get_contact_local_normal>` **(** :ref:`int<class_int>` contact_idx **)** const                                   |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_vector2>`                                      | :ref:`get_contact_local_position<class_Physics2DDirectBodyState_get_contact_local_position>` **(** :ref:`int<class_int>` contact_idx **)** const                               |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                                              | :ref:`get_contact_local_shape<class_Physics2DDirectBodyState_get_contact_local_shape>` **(** :ref:`int<class_int>` contact_idx **)** const                                     |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Physics2DDirectSpaceState<class_physics2ddirectspacestate>`  | :ref:`get_space_state<class_Physics2DDirectBodyState_get_space_state>` **(** **)**                                                                                             |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                               | :ref:`integrate_forces<class_Physics2DDirectBodyState_integrate_forces>` **(** **)**                                                                                           |
+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Member Variables
----------------

  .. _class_Physics2DDirectBodyState_angular_velocity:

- :ref:`float<class_float>` **angular_velocity** - The angular velocity of the body.

  .. _class_Physics2DDirectBodyState_inverse_inertia:

- :ref:`float<class_float>` **inverse_inertia** - The inverse of the inertia of the body.

  .. _class_Physics2DDirectBodyState_inverse_mass:

- :ref:`float<class_float>` **inverse_mass** - The inverse of the mass of the body.

  .. _class_Physics2DDirectBodyState_linear_velocity:

- :ref:`Vector2<class_vector2>` **linear_velocity** - The linear velocity of the body.

  .. _class_Physics2DDirectBodyState_sleeping:

- :ref:`bool<class_bool>` **sleeping** - ``true`` if this body is currently sleeping (not active).

  .. _class_Physics2DDirectBodyState_step:

- :ref:`float<class_float>` **step** - The timestep (delta) used for the simulation.

  .. _class_Physics2DDirectBodyState_total_angular_damp:

- :ref:`float<class_float>` **total_angular_damp** - The rate at which the body stops rotating, if there are not any other forces moving it.

  .. _class_Physics2DDirectBodyState_total_gravity:

- :ref:`Vector2<class_vector2>` **total_gravity** - The total gravity vector being currently applied to this body.

  .. _class_Physics2DDirectBodyState_total_linear_damp:

- :ref:`float<class_float>` **total_linear_damp** - The rate at which the body stops moving, if there are not any other forces moving it.

  .. _class_Physics2DDirectBodyState_transform:

- :ref:`Transform2D<class_transform2d>` **transform** - The transformation matrix of the body.


Description
-----------

Direct access object to a physics body in the :ref:`Physics2DServer<class_physics2dserver>`. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body.

Member Function Description
---------------------------

.. _class_Physics2DDirectBodyState_get_contact_collider:

- :ref:`RID<class_rid>` **get_contact_collider** **(** :ref:`int<class_int>` contact_idx **)** const

Return the :ref:`RID<class_rid>` of the collider.

.. _class_Physics2DDirectBodyState_get_contact_collider_id:

- :ref:`int<class_int>` **get_contact_collider_id** **(** :ref:`int<class_int>` contact_idx **)** const

Return the object id of the collider.

.. _class_Physics2DDirectBodyState_get_contact_collider_object:

- :ref:`Object<class_object>` **get_contact_collider_object** **(** :ref:`int<class_int>` contact_idx **)** const

Return the collider object, this depends on how it was created (will return a scene node if such was used to create it).

.. _class_Physics2DDirectBodyState_get_contact_collider_position:

- :ref:`Vector2<class_vector2>` **get_contact_collider_position** **(** :ref:`int<class_int>` contact_idx **)** const

Return the contact position in the collider.

.. _class_Physics2DDirectBodyState_get_contact_collider_shape:

- :ref:`int<class_int>` **get_contact_collider_shape** **(** :ref:`int<class_int>` contact_idx **)** const

Return the collider shape index.

.. _class_Physics2DDirectBodyState_get_contact_collider_shape_metadata:

- :ref:`Variant<class_variant>` **get_contact_collider_shape_metadata** **(** :ref:`int<class_int>` contact_idx **)** const

Return the metadata of the collided shape. This metadata is different from :ref:`Object.get_meta<class_Object_get_meta>`, and is set with :ref:`Physics2DServer.shape_set_data<class_Physics2DServer_shape_set_data>`.

.. _class_Physics2DDirectBodyState_get_contact_collider_velocity_at_position:

- :ref:`Vector2<class_vector2>` **get_contact_collider_velocity_at_position** **(** :ref:`int<class_int>` contact_idx **)** const

Return the linear velocity vector at contact point of the collider.

.. _class_Physics2DDirectBodyState_get_contact_count:

- :ref:`int<class_int>` **get_contact_count** **(** **)** const

Return the amount of contacts this body has with other bodies. Note that by default this returns 0 unless bodies are configured to log contacts.

.. _class_Physics2DDirectBodyState_get_contact_local_normal:

- :ref:`Vector2<class_vector2>` **get_contact_local_normal** **(** :ref:`int<class_int>` contact_idx **)** const

Return the local normal (of this body) of the contact point.

.. _class_Physics2DDirectBodyState_get_contact_local_position:

- :ref:`Vector2<class_vector2>` **get_contact_local_position** **(** :ref:`int<class_int>` contact_idx **)** const

Return the local position (of this body) of the contact point.

.. _class_Physics2DDirectBodyState_get_contact_local_shape:

- :ref:`int<class_int>` **get_contact_local_shape** **(** :ref:`int<class_int>` contact_idx **)** const

Return the local shape index of the collision.

.. _class_Physics2DDirectBodyState_get_space_state:

- :ref:`Physics2DDirectSpaceState<class_physics2ddirectspacestate>` **get_space_state** **(** **)**

Return the current state of space, useful for queries.

.. _class_Physics2DDirectBodyState_integrate_forces:

- void **integrate_forces** **(** **)**

Call the built-in force integration code.


