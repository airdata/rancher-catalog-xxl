.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the AStar.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_AStar:

AStar
=====

**Inherits:** :ref:`Reference<class_reference>` **<** :ref:`Object<class_object>`

**Category:** Core

Brief Description
-----------------

AStar class representation that uses vectors as edges.

Member Functions
----------------

+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                        | :ref:`_compute_cost<class_AStar__compute_cost>` **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)** virtual                                   |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                        | :ref:`_estimate_cost<class_AStar__estimate_cost>` **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)** virtual                                 |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                             | :ref:`add_point<class_AStar_add_point>` **(** :ref:`int<class_int>` id, :ref:`Vector3<class_vector3>` position, :ref:`float<class_float>` weight_scale=1.0 **)** |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                          | :ref:`are_points_connected<class_AStar_are_points_connected>` **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id **)** const                            |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                             | :ref:`clear<class_AStar_clear>` **(** **)**                                                                                                                      |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                             | :ref:`connect_points<class_AStar_connect_points>` **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id, :ref:`bool<class_bool>` bidirectional=true **)**  |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                             | :ref:`disconnect_points<class_AStar_disconnect_points>` **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id **)**                                        |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                            | :ref:`get_available_point_id<class_AStar_get_available_point_id>` **(** **)** const                                                                              |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                            | :ref:`get_closest_point<class_AStar_get_closest_point>` **(** :ref:`Vector3<class_vector3>` to_position **)** const                                              |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_vector3>`                    | :ref:`get_closest_position_in_segment<class_AStar_get_closest_position_in_segment>` **(** :ref:`Vector3<class_vector3>` to_position **)** const                  |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolIntArray<class_poolintarray>`          | :ref:`get_id_path<class_AStar_get_id_path>` **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)**                                               |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolIntArray<class_poolintarray>`          | :ref:`get_point_connections<class_AStar_get_point_connections>` **(** :ref:`int<class_int>` id **)**                                                             |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolVector3Array<class_poolvector3array>`  | :ref:`get_point_path<class_AStar_get_point_path>` **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)**                                         |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector3<class_vector3>`                    | :ref:`get_point_position<class_AStar_get_point_position>` **(** :ref:`int<class_int>` id **)** const                                                             |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                        | :ref:`get_point_weight_scale<class_AStar_get_point_weight_scale>` **(** :ref:`int<class_int>` id **)** const                                                     |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_array>`                        | :ref:`get_points<class_AStar_get_points>` **(** **)**                                                                                                            |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                          | :ref:`has_point<class_AStar_has_point>` **(** :ref:`int<class_int>` id **)** const                                                                               |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                             | :ref:`remove_point<class_AStar_remove_point>` **(** :ref:`int<class_int>` id **)**                                                                               |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                             | :ref:`set_point_position<class_AStar_set_point_position>` **(** :ref:`int<class_int>` id, :ref:`Vector3<class_vector3>` position **)**                           |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                             | :ref:`set_point_weight_scale<class_AStar_set_point_weight_scale>` **(** :ref:`int<class_int>` id, :ref:`float<class_float>` weight_scale **)**                   |
+--------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Description
-----------

A\* (A star) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting an efficiently directed path between multiple points. It enjoys widespread use due to its performance and accuracy. Godot's A\* implementation make use of vectors as points.

You must add points manually with :ref:`AStar.add_point<class_AStar_add_point>` and create segments manually with :ref:`AStar.connect_points<class_AStar_connect_points>`. So you can test if there is a path between two points with the :ref:`AStar.are_points_connected<class_AStar_are_points_connected>` function, get the list of existing ids in the found path with :ref:`AStar.get_id_path<class_AStar_get_id_path>`, or the points list with :ref:`AStar.get_point_path<class_AStar_get_point_path>`.

Member Function Description
---------------------------

.. _class_AStar__compute_cost:

- :ref:`float<class_float>` **_compute_cost** **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)** virtual

Called when computing the cost between two connected points.

.. _class_AStar__estimate_cost:

- :ref:`float<class_float>` **_estimate_cost** **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)** virtual

Called when estimating the cost between a point and the path's ending point.

.. _class_AStar_add_point:

- void **add_point** **(** :ref:`int<class_int>` id, :ref:`Vector3<class_vector3>` position, :ref:`float<class_float>` weight_scale=1.0 **)**

Adds a new point at the given position with the given identifier. The algorithm prefers points with lower ``weight_scale`` to form a path. The ``id`` must be 0 or larger, and the ``weight_scale`` must be 1 or larger.

::

    var as = AStar.new()
    
    as.add_point(1, Vector3(1,0,0), 4) # Adds the point (1,0,0) with weight_scale=4 and id=1

If there already exists a point for the given id, its position and weight scale are updated to the given values.

.. _class_AStar_are_points_connected:

- :ref:`bool<class_bool>` **are_points_connected** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id **)** const

Returns whether there is a connection/segment between the given points.

.. _class_AStar_clear:

- void **clear** **(** **)**

Clears all the points and segments.

.. _class_AStar_connect_points:

- void **connect_points** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id, :ref:`bool<class_bool>` bidirectional=true **)**

Creates a segment between the given points.

::

    var as = AStar.new()
    
    as.add_point(1, Vector3(1,1,0))
    as.add_point(2, Vector3(0,5,0))
    
    as.connect_points(1, 2, false) # If bidirectional=false it's only possible to go from point 1 to point 2
                                   # and not from point 2 to point 1.

.. _class_AStar_disconnect_points:

- void **disconnect_points** **(** :ref:`int<class_int>` id, :ref:`int<class_int>` to_id **)**

Deletes the segment between the given points.

.. _class_AStar_get_available_point_id:

- :ref:`int<class_int>` **get_available_point_id** **(** **)** const

Returns the next available point id with no point associated to it.

.. _class_AStar_get_closest_point:

- :ref:`int<class_int>` **get_closest_point** **(** :ref:`Vector3<class_vector3>` to_position **)** const

Returns the id of the closest point to ``to_position``. Returns -1 if there are no points in the points pool.

.. _class_AStar_get_closest_position_in_segment:

- :ref:`Vector3<class_vector3>` **get_closest_position_in_segment** **(** :ref:`Vector3<class_vector3>` to_position **)** const

Returns the closest position to ``to_position`` that resides inside a segment between two connected points.

::

    var as = AStar.new()
    
    as.add_point(1, Vector3(0,0,0))
    as.add_point(2, Vector3(0,5,0))
    
    as.connect_points(1, 2)
    
    var res = as.get_closest_position_in_segment(Vector3(3,3,0)) # returns (0, 3, 0)

The result is in the segment that goes from ``y=0`` to ``y=5``. It's the closest position in the segment to the given point.

.. _class_AStar_get_id_path:

- :ref:`PoolIntArray<class_poolintarray>` **get_id_path** **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)**

Returns an array with the ids of the points that form the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.

::

    var as = AStar.new()
    
    as.add_point(1, Vector3(0,0,0))
    as.add_point(2, Vector3(0,1,0), 1) # default weight is 1
    as.add_point(3, Vector3(1,1,0))
    as.add_point(4, Vector3(2,0,0))
    
    as.connect_points(1, 2, false)
    as.connect_points(2, 3, false)
    as.connect_points(4, 3, false)
    as.connect_points(1, 4, false)
    as.connect_points(5, 4, false)
    
    var res = as.get_id_path(1, 3) # returns [1, 2, 3]

If you change the 2nd point's weight to 3, then the result will be ``[1, 4, 3]`` instead, because now even though the distance is longer, it's "easier" to get through point 4 than through point 2.

.. _class_AStar_get_point_connections:

- :ref:`PoolIntArray<class_poolintarray>` **get_point_connections** **(** :ref:`int<class_int>` id **)**

Returns an array with the ids of the points that form the connect with the given point.

::

    var as = AStar.new()
    
    as.add_point(1, Vector3(0,0,0))
    as.add_point(2, Vector3(0,1,0))
    as.add_point(3, Vector3(1,1,0))
    as.add_point(4, Vector3(2,0,0))
    
    as.connect_points(1, 2, true)
    as.connect_points(1, 3, true)
    
    var neighbors = as.get_point_connections(1) # returns [2, 3]

.. _class_AStar_get_point_path:

- :ref:`PoolVector3Array<class_poolvector3array>` **get_point_path** **(** :ref:`int<class_int>` from_id, :ref:`int<class_int>` to_id **)**

Returns an array with the points that are in the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.

.. _class_AStar_get_point_position:

- :ref:`Vector3<class_vector3>` **get_point_position** **(** :ref:`int<class_int>` id **)** const

Returns the position of the point associated with the given id.

.. _class_AStar_get_point_weight_scale:

- :ref:`float<class_float>` **get_point_weight_scale** **(** :ref:`int<class_int>` id **)** const

Returns the weight scale of the point associated with the given id.

.. _class_AStar_get_points:

- :ref:`Array<class_array>` **get_points** **(** **)**

Returns an array of all points.

.. _class_AStar_has_point:

- :ref:`bool<class_bool>` **has_point** **(** :ref:`int<class_int>` id **)** const

Returns whether a point associated with the given id exists.

.. _class_AStar_remove_point:

- void **remove_point** **(** :ref:`int<class_int>` id **)**

Removes the point associated with the given id from the points pool.

.. _class_AStar_set_point_position:

- void **set_point_position** **(** :ref:`int<class_int>` id, :ref:`Vector3<class_vector3>` position **)**

Sets the position for the point with the given id.

.. _class_AStar_set_point_weight_scale:

- void **set_point_weight_scale** **(** :ref:`int<class_int>` id, :ref:`float<class_float>` weight_scale **)**

Sets the ``weight_scale`` for the point with the given id.


