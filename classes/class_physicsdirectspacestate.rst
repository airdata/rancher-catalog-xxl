.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the PhysicsDirectSpaceState.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PhysicsDirectSpaceState:

PhysicsDirectSpaceState
=======================

**Inherits:** :ref:`Object<class_object>`

**Category:** Core

Brief Description
-----------------

Direct access object to a space in the :ref:`PhysicsServer<class_physicsserver>`.

Member Functions
----------------

+--------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_array>`            | :ref:`cast_motion<class_PhysicsDirectSpaceState_cast_motion>` **(** :ref:`PhysicsShapeQueryParameters<class_physicsshapequeryparameters>` shape, :ref:`Vector3<class_vector3>` motion **)**                                                  |
+--------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_array>`            | :ref:`collide_shape<class_PhysicsDirectSpaceState_collide_shape>` **(** :ref:`PhysicsShapeQueryParameters<class_physicsshapequeryparameters>` shape, :ref:`int<class_int>` max_results=32 **)**                                              |
+--------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_dictionary>`  | :ref:`get_rest_info<class_PhysicsDirectSpaceState_get_rest_info>` **(** :ref:`PhysicsShapeQueryParameters<class_physicsshapequeryparameters>` shape **)**                                                                                    |
+--------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_dictionary>`  | :ref:`intersect_ray<class_PhysicsDirectSpaceState_intersect_ray>` **(** :ref:`Vector3<class_vector3>` from, :ref:`Vector3<class_vector3>` to, :ref:`Array<class_array>` exclude=[  ], :ref:`int<class_int>` collision_layer=2147483647 **)** |
+--------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_array>`            | :ref:`intersect_shape<class_PhysicsDirectSpaceState_intersect_shape>` **(** :ref:`PhysicsShapeQueryParameters<class_physicsshapequeryparameters>` shape, :ref:`int<class_int>` max_results=32 **)**                                          |
+--------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Description
-----------

Direct access object to a space in the :ref:`PhysicsServer<class_physicsserver>`. It's used mainly to do queries against objects and areas residing in a given space.

Member Function Description
---------------------------

.. _class_PhysicsDirectSpaceState_cast_motion:

- :ref:`Array<class_array>` **cast_motion** **(** :ref:`PhysicsShapeQueryParameters<class_physicsshapequeryparameters>` shape, :ref:`Vector3<class_vector3>` motion **)**

Checks whether the shape can travel to a point. The method will return an array with two floats between 0 and 1, both representing a fraction of ``motion``. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be 1, 1.

If the shape can not move, the array will be empty (``dir.empty()==true``).

.. _class_PhysicsDirectSpaceState_collide_shape:

- :ref:`Array<class_array>` **collide_shape** **(** :ref:`PhysicsShapeQueryParameters<class_physicsshapequeryparameters>` shape, :ref:`int<class_int>` max_results=32 **)**

Checks the intersections of a shape, given through a :ref:`PhysicsShapeQueryParameters<class_physicsshapequeryparameters>` object, against the space. The resulting array contains a list of points where the shape intersects another. Like with :ref:`intersect_shape<class_PhysicsDirectSpaceState_intersect_shape>`, the number of returned results can be limited to save processing time.

.. _class_PhysicsDirectSpaceState_get_rest_info:

- :ref:`Dictionary<class_dictionary>` **get_rest_info** **(** :ref:`PhysicsShapeQueryParameters<class_physicsshapequeryparameters>` shape **)**

Checks the intersections of a shape, given through a :ref:`PhysicsShapeQueryParameters<class_physicsshapequeryparameters>` object, against the space. If it collides with more than a shape, the nearest one is selected. The returned object is a dictionary containing the following fields:

``collider_id``: The colliding object's ID.

``linear_velocity``: The colliding object's velocity :ref:`Vector3<class_vector3>`. If the object is an :ref:`Area<class_area>`, the result is ``(0, 0, 0)``.

``normal``: The object's surface normal at the intersection point.

``point``: The intersection point.

``rid``: The intersecting object's :ref:`RID<class_rid>`.

``shape``: The shape index of the colliding shape.

If the shape did not intersect anything, then an empty dictionary (``dir.empty()==true``) is returned instead.

.. _class_PhysicsDirectSpaceState_intersect_ray:

- :ref:`Dictionary<class_dictionary>` **intersect_ray** **(** :ref:`Vector3<class_vector3>` from, :ref:`Vector3<class_vector3>` to, :ref:`Array<class_array>` exclude=[  ], :ref:`int<class_int>` collision_layer=2147483647 **)**

Intersects a ray in a given space. The returned object is a dictionary with the following fields:

``collider``: The colliding object.

``collider_id``: The colliding object's ID.

``normal``: The object's surface normal at the intersection point.

``position``: The intersection point.

``rid``: The intersecting object's :ref:`RID<class_rid>`.

``shape``: The shape index of the colliding shape.

If the ray did not intersect anything, then an empty dictionary (``dir.empty()==true``) is returned instead.

Additionally, the method can take an array of objects or :ref:`RID<class_rid>`\ s that are to be excluded from collisions, or a bitmask representing the physics layers to check in.

.. _class_PhysicsDirectSpaceState_intersect_shape:

- :ref:`Array<class_array>` **intersect_shape** **(** :ref:`PhysicsShapeQueryParameters<class_physicsshapequeryparameters>` shape, :ref:`int<class_int>` max_results=32 **)**

Checks the intersections of a shape, given through a :ref:`PhysicsShapeQueryParameters<class_physicsshapequeryparameters>` object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:

``collider``: The colliding object.

``collider_id``: The colliding object's ID.

``rid``: The intersecting object's :ref:`RID<class_rid>`.

``shape``: The shape index of the colliding shape.

The number of intersections can be limited with the second parameter, to reduce the processing time.


