.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Control.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Control:

Control
=======

**Inherits:** :ref:`CanvasItem<class_canvasitem>` **<** :ref:`Node<class_node>` **<** :ref:`Object<class_object>`

**Inherited By:** :ref:`TextureRect<class_texturerect>`, :ref:`ColorRect<class_colorrect>`, :ref:`Label<class_label>`, :ref:`Tabs<class_tabs>`, :ref:`GraphEdit<class_graphedit>`, :ref:`VideoPlayer<class_videoplayer>`, :ref:`NinePatchRect<class_ninepatchrect>`, :ref:`LineEdit<class_lineedit>`, :ref:`Container<class_container>`, :ref:`TextEdit<class_textedit>`, :ref:`BaseButton<class_basebutton>`, :ref:`Popup<class_popup>`, :ref:`Tree<class_tree>`, :ref:`Separator<class_separator>`, :ref:`ReferenceRect<class_referencerect>`, :ref:`Panel<class_panel>`, :ref:`TabContainer<class_tabcontainer>`, :ref:`Range<class_range>`, :ref:`RichTextLabel<class_richtextlabel>`, :ref:`ItemList<class_itemlist>`

**Category:** Core

Brief Description
-----------------

All User Interface nodes inherit from Control. Features anchors and margins to adapt its position and size to its parent.

Member Functions
----------------

+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_vector2>`    | :ref:`_get_minimum_size<class_Control__get_minimum_size>` **(** **)** virtual                                                                                                                                                      |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`_gui_input<class_Control__gui_input>` **(** :ref:`InputEvent<class_inputevent>` event **)** virtual                                                                                                                          |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`accept_event<class_Control_accept_event>` **(** **)**                                                                                                                                                                        |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`add_color_override<class_Control_add_color_override>` **(** :ref:`String<class_string>` name, :ref:`Color<class_color>` color **)**                                                                                          |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`add_constant_override<class_Control_add_constant_override>` **(** :ref:`String<class_string>` name, :ref:`int<class_int>` constant **)**                                                                                     |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`add_font_override<class_Control_add_font_override>` **(** :ref:`String<class_string>` name, :ref:`Font<class_font>` font **)**                                                                                               |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`add_icon_override<class_Control_add_icon_override>` **(** :ref:`String<class_string>` name, :ref:`Texture<class_texture>` texture **)**                                                                                      |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`add_shader_override<class_Control_add_shader_override>` **(** :ref:`String<class_string>` name, :ref:`Shader<class_shader>` shader **)**                                                                                     |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`add_stylebox_override<class_Control_add_stylebox_override>` **(** :ref:`String<class_string>` name, :ref:`StyleBox<class_stylebox>` stylebox **)**                                                                           |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`can_drop_data<class_Control_can_drop_data>` **(** :ref:`Vector2<class_vector2>` position, :ref:`Variant<class_variant>` data **)** virtual                                                                                   |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`drop_data<class_Control_drop_data>` **(** :ref:`Vector2<class_vector2>` position, :ref:`Variant<class_variant>` data **)** virtual                                                                                           |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`force_drag<class_Control_force_drag>` **(** :ref:`Variant<class_variant>` data, :ref:`Control<class_control>` preview **)**                                                                                                  |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_vector2>`    | :ref:`get_begin<class_Control_get_begin>` **(** **)** const                                                                                                                                                                        |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_color>`        | :ref:`get_color<class_Control_get_color>` **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const                                                                                                  |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_vector2>`    | :ref:`get_combined_minimum_size<class_Control_get_combined_minimum_size>` **(** **)** const                                                                                                                                        |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`            | :ref:`get_constant<class_Control_get_constant>` **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const                                                                                            |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`            | :ref:`get_cursor_shape<class_Control_get_cursor_shape>` **(** :ref:`Vector2<class_vector2>` position=Vector2( 0, 0 ) **)** const                                                                                                   |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_object>`      | :ref:`get_drag_data<class_Control_get_drag_data>` **(** :ref:`Vector2<class_vector2>` position **)** virtual                                                                                                                       |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_vector2>`    | :ref:`get_end<class_Control_get_end>` **(** **)** const                                                                                                                                                                            |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Control<class_control>`    | :ref:`get_focus_owner<class_Control_get_focus_owner>` **(** **)** const                                                                                                                                                            |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Font<class_font>`          | :ref:`get_font<class_Control_get_font>` **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const                                                                                                    |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Rect2<class_rect2>`        | :ref:`get_global_rect<class_Control_get_global_rect>` **(** **)** const                                                                                                                                                            |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Texture<class_texture>`    | :ref:`get_icon<class_Control_get_icon>` **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const                                                                                                    |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_vector2>`    | :ref:`get_minimum_size<class_Control_get_minimum_size>` **(** **)** const                                                                                                                                                          |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_vector2>`    | :ref:`get_parent_area_size<class_Control_get_parent_area_size>` **(** **)** const                                                                                                                                                  |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Control<class_control>`    | :ref:`get_parent_control<class_Control_get_parent_control>` **(** **)** const                                                                                                                                                      |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Rect2<class_rect2>`        | :ref:`get_rect<class_Control_get_rect>` **(** **)** const                                                                                                                                                                          |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`        | :ref:`get_rotation<class_Control_get_rotation>` **(** **)** const                                                                                                                                                                  |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`StyleBox<class_stylebox>`  | :ref:`get_stylebox<class_Control_get_stylebox>` **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const                                                                                            |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_string>`      | :ref:`get_tooltip<class_Control_get_tooltip>` **(** :ref:`Vector2<class_vector2>` at_position=Vector2( 0, 0 ) **)** const                                                                                                          |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`grab_click_focus<class_Control_grab_click_focus>` **(** **)**                                                                                                                                                                |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`grab_focus<class_Control_grab_focus>` **(** **)**                                                                                                                                                                            |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_color<class_Control_has_color>` **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const                                                                                                  |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_color_override<class_Control_has_color_override>` **(** :ref:`String<class_string>` name **)** const                                                                                                                     |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_constant<class_Control_has_constant>` **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const                                                                                            |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_constant_override<class_Control_has_constant_override>` **(** :ref:`String<class_string>` name **)** const                                                                                                               |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_focus<class_Control_has_focus>` **(** **)** const                                                                                                                                                                        |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_font<class_Control_has_font>` **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const                                                                                                    |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_font_override<class_Control_has_font_override>` **(** :ref:`String<class_string>` name **)** const                                                                                                                       |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_icon<class_Control_has_icon>` **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const                                                                                                    |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_icon_override<class_Control_has_icon_override>` **(** :ref:`String<class_string>` name **)** const                                                                                                                       |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_point<class_Control_has_point>` **(** :ref:`Vector2<class_vector2>` point **)** virtual                                                                                                                                  |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_shader_override<class_Control_has_shader_override>` **(** :ref:`String<class_string>` name **)** const                                                                                                                   |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_stylebox<class_Control_has_stylebox>` **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const                                                                                            |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`          | :ref:`has_stylebox_override<class_Control_has_stylebox_override>` **(** :ref:`String<class_string>` name **)** const                                                                                                               |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`minimum_size_changed<class_Control_minimum_size_changed>` **(** **)**                                                                                                                                                        |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`release_focus<class_Control_release_focus>` **(** **)**                                                                                                                                                                      |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`set_anchor<class_Control_set_anchor>` **(** :ref:`int<class_int>` margin, :ref:`float<class_float>` anchor, :ref:`bool<class_bool>` keep_margin=false, :ref:`bool<class_bool>` push_opposite_anchor=true **)**               |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`set_anchor_and_margin<class_Control_set_anchor_and_margin>` **(** :ref:`int<class_int>` margin, :ref:`float<class_float>` anchor, :ref:`float<class_float>` offset, :ref:`bool<class_bool>` push_opposite_anchor=false **)** |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`set_anchors_and_margins_preset<class_Control_set_anchors_and_margins_preset>` **(** :ref:`int<class_int>` preset, :ref:`int<class_int>` resize_mode=0, :ref:`int<class_int>` margin=0 **)**                                  |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`set_anchors_preset<class_Control_set_anchors_preset>` **(** :ref:`int<class_int>` preset, :ref:`bool<class_bool>` keep_margin=false **)**                                                                                    |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`set_begin<class_Control_set_begin>` **(** :ref:`Vector2<class_vector2>` position **)**                                                                                                                                       |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`set_drag_forwarding<class_Control_set_drag_forwarding>` **(** :ref:`Control<class_control>` target **)**                                                                                                                     |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`set_drag_preview<class_Control_set_drag_preview>` **(** :ref:`Control<class_control>` control **)**                                                                                                                          |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`set_end<class_Control_set_end>` **(** :ref:`Vector2<class_vector2>` position **)**                                                                                                                                           |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`set_margins_preset<class_Control_set_margins_preset>` **(** :ref:`int<class_int>` preset, :ref:`int<class_int>` resize_mode=0, :ref:`int<class_int>` margin=0 **)**                                                          |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`set_rotation<class_Control_set_rotation>` **(** :ref:`float<class_float>` radians **)**                                                                                                                                      |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`show_modal<class_Control_show_modal>` **(** :ref:`bool<class_bool>` exclusive=false **)**                                                                                                                                    |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                             | :ref:`warp_mouse<class_Control_warp_mouse>` **(** :ref:`Vector2<class_vector2>` to_position **)**                                                                                                                                  |
+----------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Signals
-------

.. _class_Control_focus_entered:

- **focus_entered** **(** **)**

Emitted when the node gains keyboard focus.

.. _class_Control_focus_exited:

- **focus_exited** **(** **)**

Emitted when the node loses keyboard focus.

.. _class_Control_gui_input:

- **gui_input** **(** :ref:`Object<class_object>` ev **)**

Emitted when the node receives an :ref:`InputEvent<class_inputevent>`.

.. _class_Control_minimum_size_changed:

- **minimum_size_changed** **(** **)**

Emitted when the node's minimum size changes.

.. _class_Control_modal_closed:

- **modal_closed** **(** **)**

Emitted when a modal ``Control`` is closed. See :ref:`show_modal<class_Control_show_modal>`.

.. _class_Control_mouse_entered:

- **mouse_entered** **(** **)**

Emitted when the mouse enters the control's ``Rect`` area, provided its :ref:`mouse_filter<class_Control_mouse_filter>` lets the event reach it.

.. _class_Control_mouse_exited:

- **mouse_exited** **(** **)**

Emitted when the mouse leaves the control's ``Rect`` area, provided its :ref:`mouse_filter<class_Control_mouse_filter>` lets the event reach it.

.. _class_Control_resized:

- **resized** **(** **)**

Emitted when the control changes size.

.. _class_Control_size_flags_changed:

- **size_flags_changed** **(** **)**

Emitted when one of the size flags changes. See :ref:`size_flags_horizontal<class_Control_size_flags_horizontal>` and :ref:`size_flags_vertical<class_Control_size_flags_vertical>`.


Member Variables
----------------

  .. _class_Control_anchor_bottom:

- :ref:`float<class_float>` **anchor_bottom** - Anchors the bottom edge of the node to the origin, the center, or the end of its parent container. It changes how the bottom margin updates when the node moves or changes size. Use one of the ``ANCHOR_*`` constants. Default value: ``ANCHOR_BEGIN``.

  .. _class_Control_anchor_left:

- :ref:`float<class_float>` **anchor_left** - Anchors the left edge of the node to the origin, the center or the end of its parent container. It changes how the left margin updates when the node moves or changes size. Use one of the ``ANCHOR_*`` constants. Default value: ``ANCHOR_BEGIN``.

  .. _class_Control_anchor_right:

- :ref:`float<class_float>` **anchor_right** - Anchors the right edge of the node to the origin, the center or the end of its parent container. It changes how the right margin updates when the node moves or changes size. Use one of the ``ANCHOR_*`` constants. Default value: ``ANCHOR_BEGIN``.

  .. _class_Control_anchor_top:

- :ref:`float<class_float>` **anchor_top** - Anchors the top edge of the node to the origin, the center or the end of its parent container. It changes how the top margin updates when the node moves or changes size. Use one of the ``ANCHOR_*`` constants. Default value: ``ANCHOR_BEGIN``.

  .. _class_Control_focus_mode:

- :ref:`FocusMode<enum_control_focusmode>` **focus_mode** - The focus access mode for the control (None, Click or All). Only one Control can be focused at the same time, and it will receive keyboard signals.

  .. _class_Control_focus_neighbour_bottom:

- :ref:`NodePath<class_nodepath>` **focus_neighbour_bottom** - Tells Godot which node it should give keyboard focus to if the user presses Tab, the down arrow on the keyboard, or down on a gamepad. The node must be a ``Control``. If this property is not set, Godot will give focus to the closest ``Control`` to the bottom of this one.

If the user presses Tab, Godot will give focus to the closest node to the right first, then to the bottom. If the user presses Shift+Tab, Godot will look to the left of the node, then above it.

  .. _class_Control_focus_neighbour_left:

- :ref:`NodePath<class_nodepath>` **focus_neighbour_left** - Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab, the left arrow on the keyboard or left on a gamepad. The node must be a ``Control``. If this property is not set, Godot will give focus to the closest ``Control`` to the left of this one.

  .. _class_Control_focus_neighbour_right:

- :ref:`NodePath<class_nodepath>` **focus_neighbour_right** - Tells Godot which node it should give keyboard focus to if the user presses Tab, the right arrow on the keyboard or right on a gamepad. The node must be a ``Control``. If this property is not set, Godot will give focus to the closest ``Control`` to the bottom of this one.

  .. _class_Control_focus_neighbour_top:

- :ref:`NodePath<class_nodepath>` **focus_neighbour_top** - Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab, the top arrow on the keyboard or top on a gamepad. The node must be a ``Control``. If this property is not set, Godot will give focus to the closest ``Control`` to the bottom of this one.

  .. _class_Control_focus_next:

- :ref:`NodePath<class_nodepath>` **focus_next**

  .. _class_Control_focus_previous:

- :ref:`NodePath<class_nodepath>` **focus_previous**

  .. _class_Control_grow_horizontal:

- :ref:`GrowDirection<enum_control_growdirection>` **grow_horizontal**

  .. _class_Control_grow_vertical:

- :ref:`GrowDirection<enum_control_growdirection>` **grow_vertical**

  .. _class_Control_hint_tooltip:

- :ref:`String<class_string>` **hint_tooltip** - Changes the tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments.

  .. _class_Control_margin_bottom:

- :ref:`float<class_float>` **margin_bottom** - Distance between the node's bottom edge and its parent container, based on :ref:`anchor_bottom<class_Control_anchor_bottom>`.

Margins are often controlled by one or multiple parent :ref:`Container<class_container>` nodes. Margins update automatically when you move or resize the node.

  .. _class_Control_margin_left:

- :ref:`float<class_float>` **margin_left** - Distance between the node's left edge and its parent container, based on :ref:`anchor_left<class_Control_anchor_left>`.

  .. _class_Control_margin_right:

- :ref:`float<class_float>` **margin_right** - Distance between the node's right edge and its parent container, based on :ref:`anchor_right<class_Control_anchor_right>`.

  .. _class_Control_margin_top:

- :ref:`float<class_float>` **margin_top** - Distance between the node's top edge and its parent container, based on :ref:`anchor_top<class_Control_anchor_top>`.

  .. _class_Control_mouse_default_cursor_shape:

- :ref:`CursorShape<enum_control_cursorshape>` **mouse_default_cursor_shape** - The default cursor shape for this control. Useful for Godot plugins and applications or games that use the system's mouse cursors.

  .. _class_Control_mouse_filter:

- :ref:`MouseFilter<enum_control_mousefilter>` **mouse_filter** - Controls whether the control will be able to receive mouse button input events through :ref:`_gui_input<class_Control__gui_input>` and how these events should be handled. Use one of the ``MOUSE_FILTER_*`` constants. See the constants to learn what each does.

  .. _class_Control_rect_clip_content:

- :ref:`bool<class_bool>` **rect_clip_content**

  .. _class_Control_rect_global_position:

- :ref:`Vector2<class_vector2>` **rect_global_position** - The node's global position, relative to the world (usually to the top-left corner of the window).

  .. _class_Control_rect_min_size:

- :ref:`Vector2<class_vector2>` **rect_min_size** - The minimum size of the node's bounding rectangle. If you set it to a value greater than (0, 0), the node's bounding rectangle will always have at least this size, even if its content is smaller. If it's set to (0, 0), the node sizes automatically to fit its content, be it a texture or child nodes.

  .. _class_Control_rect_pivot_offset:

- :ref:`Vector2<class_vector2>` **rect_pivot_offset** - By default, the node's pivot is its top-left corner. When you change its :ref:`rect_scale<class_Control_rect_scale>`, it will scale around this pivot. Set this property to :ref:`rect_size<class_Control_rect_size>` / 2 to center the pivot in the node's rectangle.

  .. _class_Control_rect_position:

- :ref:`Vector2<class_vector2>` **rect_position** - The node's position, relative to its parent. It corresponds to the rectangle's top-left corner. The property is not affected by :ref:`rect_pivot_offset<class_Control_rect_pivot_offset>`.

  .. _class_Control_rect_rotation:

- :ref:`float<class_float>` **rect_rotation** - The node's rotation around its pivot, in degrees. See :ref:`rect_pivot_offset<class_Control_rect_pivot_offset>` to change the pivot's position.

  .. _class_Control_rect_scale:

- :ref:`Vector2<class_vector2>` **rect_scale** - The node's scale, relative to its :ref:`rect_size<class_Control_rect_size>`. Change this property to scale the node around its :ref:`rect_pivot_offset<class_Control_rect_pivot_offset>`.

  .. _class_Control_rect_size:

- :ref:`Vector2<class_vector2>` **rect_size** - The size of the node's bounding rectangle, in pixels. :ref:`Container<class_container>` nodes update this property automatically.

  .. _class_Control_size_flags_horizontal:

- :ref:`int<class_int>` **size_flags_horizontal** - Tells the parent :ref:`Container<class_container>` nodes how they should resize and place the node on the X axis. Use one of the ``SIZE_*`` constants to change the flags. See the constants to learn what each does.

  .. _class_Control_size_flags_stretch_ratio:

- :ref:`float<class_float>` **size_flags_stretch_ratio** - If the node and at least one of its neighbours uses the ``SIZE_EXPAND`` size flag, the parent :ref:`Container<class_container>` will let it take more or less space depending on this property. If this node has a stretch ratio of 2 and its neighbour a ratio of 1, this node will take two thirds of the available space.

  .. _class_Control_size_flags_vertical:

- :ref:`int<class_int>` **size_flags_vertical** - Tells the parent :ref:`Container<class_container>` nodes how they should resize and place the node on the Y axis. Use one of the ``SIZE_*`` constants to change the flags. See the constants to learn what each does.

  .. _class_Control_theme:

- :ref:`Theme<class_theme>` **theme** - Changing this property replaces the current :ref:`Theme<class_theme>` resource this node and all its ``Control`` children use.


Numeric Constants
-----------------

- **NOTIFICATION_RESIZED** = **40** --- Sent when the node changes size. Use :ref:`rect_size<class_Control_rect_size>` to get the new size.
- **NOTIFICATION_MOUSE_ENTER** = **41** --- Sent when the mouse pointer enters the node's ``Rect`` area.
- **NOTIFICATION_MOUSE_EXIT** = **42** --- Sent when the mouse pointer exits the node's ``Rect`` area.
- **NOTIFICATION_FOCUS_ENTER** = **43** --- Sent when the node grabs focus.
- **NOTIFICATION_FOCUS_EXIT** = **44** --- Sent when the node loses focus.
- **NOTIFICATION_THEME_CHANGED** = **45** --- Sent when the node's :ref:`theme<class_Control_theme>` changes, right before Godot redraws the ``Control``. Happens when you call one of the ``add_*_override``
- **NOTIFICATION_MODAL_CLOSE** = **46** --- Sent when an open modal dialog closes. See :ref:`show_modal<class_Control_show_modal>`.
- **NOTIFICATION_SCROLL_BEGIN** = **47**
- **NOTIFICATION_SCROLL_END** = **48**

Enums
-----

  .. _enum_Control_SizeFlags:

enum **SizeFlags**

- **SIZE_FILL** = **1** --- Tells the parent :ref:`Container<class_container>` to expand the bounds of this node to fill all the available space without pushing any other node. Use with :ref:`size_flags_horizontal<class_Control_size_flags_horizontal>` and :ref:`size_flags_vertical<class_Control_size_flags_vertical>`.
- **SIZE_EXPAND** = **2** --- Tells the parent :ref:`Container<class_container>` to let this node take all the available space on the axis you flag. If multiple neighboring nodes are set to expand, they'll share the space based on their stretch ratio. See :ref:`size_flags_stretch_ratio<class_Control_size_flags_stretch_ratio>`. Use with :ref:`size_flags_horizontal<class_Control_size_flags_horizontal>` and :ref:`size_flags_vertical<class_Control_size_flags_vertical>`.
- **SIZE_EXPAND_FILL** = **3** --- Sets the node's size flags to both fill and expand. See the 2 constants above for more information.
- **SIZE_SHRINK_CENTER** = **4** --- Tells the parent :ref:`Container<class_container>` to center the node in itself. It centers the ``Control`` based on its bounding box, so it doesn't work with the fill or expand size flags. Use with :ref:`size_flags_horizontal<class_Control_size_flags_horizontal>` and :ref:`size_flags_vertical<class_Control_size_flags_vertical>`.
- **SIZE_SHRINK_END** = **8** --- Tells the parent :ref:`Container<class_container>` to align the node with its end, either the bottom or the right edge. It doesn't work with the fill or expand size flags. Use with :ref:`size_flags_horizontal<class_Control_size_flags_horizontal>` and :ref:`size_flags_vertical<class_Control_size_flags_vertical>`.

  .. _enum_Control_CursorShape:

enum **CursorShape**

- **CURSOR_ARROW** = **0** --- Show the system's arrow mouse cursor when the user hovers the node. Use with :ref:`set_default_cursor_shape<class_Control_set_default_cursor_shape>`.
- **CURSOR_IBEAM** = **1** --- Show the system's I-beam mouse cursor when the user hovers the node. The I-beam pointer has a shape similar to "I". It tells the user they can highlight or insert text.
- **CURSOR_POINTING_HAND** = **2** --- Show the system's pointing hand mouse cursor when the user hovers the node.
- **CURSOR_CROSS** = **3** --- Show the system's cross mouse cursor when the user hovers the node.
- **CURSOR_WAIT** = **4** --- Show the system's wait mouse cursor, often an hourglass, when the user hovers the node.
- **CURSOR_BUSY** = **5** --- Show the system's busy mouse cursor when the user hovers the node. Often an hourglass.
- **CURSOR_DRAG** = **6** --- Show the system's drag mouse cursor, often a closed fist or a cross symbol, when the user hovers the node. It tells the user they're currently dragging an item, like a node in the Scene dock.
- **CURSOR_CAN_DROP** = **7** --- Show the system's drop mouse cursor when the user hovers the node. It can be an open hand. It tells the user they can drop an item they're currently grabbing, like a node in the Scene dock.
- **CURSOR_FORBIDDEN** = **8** --- Show the system's forbidden mouse cursor when the user hovers the node. Often a crossed circle.
- **CURSOR_VSIZE** = **9** --- Show the system's vertical resize mouse cursor when the user hovers the node. A double headed vertical arrow. It tells the user they can resize the window or the panel vertically.
- **CURSOR_HSIZE** = **10** --- Show the system's horizontal resize mouse cursor when the user hovers the node. A double headed horizontal arrow. It tells the user they can resize the window or the panel horizontally.
- **CURSOR_BDIAGSIZE** = **11** --- Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically.
- **CURSOR_FDIAGSIZE** = **12** --- Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double headed arrow that goes from the top left to the bottom right, the opposite of ``CURSOR_BDIAGSIZE``. It tells the user they can resize the window or the panel both horizontally and vertically.
- **CURSOR_MOVE** = **13** --- Show the system's move mouse cursor when the user hovers the node. It shows 2 double-headed arrows at a 90 degree angle. It tells the user they can move a UI element freely.
- **CURSOR_VSPLIT** = **14** --- Show the system's vertical split mouse cursor when the user hovers the node. On Windows, it's the same as ``CURSOR_VSIZE``.
- **CURSOR_HSPLIT** = **15** --- Show the system's horizontal split mouse cursor when the user hovers the node. On Windows, it's the same as ``CURSOR_HSIZE``.
- **CURSOR_HELP** = **16** --- Show the system's help mouse cursor when the user hovers the node, a question mark.

  .. _enum_Control_FocusMode:

enum **FocusMode**

- **FOCUS_NONE** = **0** --- The node cannot grab focus. Use with :ref:`set_focus_mode<class_Control_set_focus_mode>`.
- **FOCUS_CLICK** = **1** --- The node can only grab focus on mouse clicks. Use with :ref:`set_focus_mode<class_Control_set_focus_mode>`.
- **FOCUS_ALL** = **2** --- The node can grab focus on mouse click or using the arrows and the Tab keys on the keyboard. Use with :ref:`set_focus_mode<class_Control_set_focus_mode>`.

  .. _enum_Control_GrowDirection:

enum **GrowDirection**

- **GROW_DIRECTION_BEGIN** = **0**
- **GROW_DIRECTION_END** = **1**
- **GROW_DIRECTION_BOTH** = **2**

  .. _enum_Control_LayoutPresetMode:

enum **LayoutPresetMode**

- **PRESET_MODE_MINSIZE** = **0**
- **PRESET_MODE_KEEP_WIDTH** = **1**
- **PRESET_MODE_KEEP_HEIGHT** = **2**
- **PRESET_MODE_KEEP_SIZE** = **3**

  .. _enum_Control_LayoutPreset:

enum **LayoutPreset**

- **PRESET_TOP_LEFT** = **0** --- Snap all 4 anchors to the top-left of the parent container's bounds. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_TOP_RIGHT** = **1** --- Snap all 4 anchors to the top-right of the parent container's bounds. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_BOTTOM_LEFT** = **2** --- Snap all 4 anchors to the bottom-left of the parent container's bounds. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_BOTTOM_RIGHT** = **3** --- Snap all 4 anchors to the bottom-right of the parent container's bounds. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_CENTER_LEFT** = **4** --- Snap all 4 anchors to the center of the left edge of the parent container's bounds. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_CENTER_TOP** = **5** --- Snap all 4 anchors to the center of the top edge of the parent container's bounds. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_CENTER_RIGHT** = **6** --- Snap all 4 anchors to the center of the right edge of the parent container's bounds. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_CENTER_BOTTOM** = **7** --- Snap all 4 anchors to the center of the bottom edge of the parent container's bounds. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_CENTER** = **8** --- Snap all 4 anchors to the center of the parent container's bounds. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_LEFT_WIDE** = **9** --- Snap all 4 anchors to the left edge of the parent container. The left margin becomes relative to the left edge and the top margin relative to the top left corner of the node's parent. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_TOP_WIDE** = **10** --- Snap all 4 anchors to the top edge of the parent container. The left margin becomes relative to the top left corner, the top margin relative to the top edge, and the right margin relative to the top right corner of the node's parent. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_RIGHT_WIDE** = **11** --- Snap all 4 anchors to the right edge of the parent container. The right margin becomes relative to the right edge and the top margin relative to the top right corner of the node's parent. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_BOTTOM_WIDE** = **12** --- Snap all 4 anchors to the bottom edge of the parent container. The left margin becomes relative to the bottom left corner, the bottom margin relative to the bottom edge, and the right margin relative to the bottom right corner of the node's parent. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_VCENTER_WIDE** = **13** --- Snap all 4 anchors to a vertical line that cuts the parent container in half. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_HCENTER_WIDE** = **14** --- Snap all 4 anchors to a horizontal line that cuts the parent container in half. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **PRESET_WIDE** = **15** --- Snap all 4 anchors to the respective corners of the parent container. Set all 4 margins to 0 after you applied this preset and the ``Control`` will fit its parent container. Use with :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.

  .. _enum_Control_MouseFilter:

enum **MouseFilter**

- **MOUSE_FILTER_STOP** = **0** --- The control will receive mouse button input events through :ref:`_gui_input<class_Control__gui_input>` if clicked on. These events are automatically marked as handled and they will not propagate further to other controls.
- **MOUSE_FILTER_PASS** = **1** --- The control will receive mouse button input events through :ref:`_gui_input<class_Control__gui_input>` if clicked on. If this control does not handle the event, the parent control (if any) will be considered for a mouse click, and so on until there is no more parent control to potentially handle it. Even if no control handled it at all, the event will still be handled automatically.
- **MOUSE_FILTER_IGNORE** = **2** --- The control will not receive mouse button input events through :ref:`_gui_input<class_Control__gui_input>` and will not block other controls from receiving these events. These events will also not be handled automatically.

  .. _enum_Control_Anchor:

enum **Anchor**

- **ANCHOR_BEGIN** = **0** --- Snaps one of the 4 anchor's sides to the origin of the node's ``Rect``, in the top left. Use it with one of the ``anchor_*`` member variables, like :ref:`anchor_left<class_Control_anchor_left>`. To change all 4 anchors at once, use :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.
- **ANCHOR_END** = **1** --- Snaps one of the 4 anchor's sides to the end of the node's ``Rect``, in the bottom right. Use it with one of the ``anchor_*`` member variables, like :ref:`anchor_left<class_Control_anchor_left>`. To change all 4 anchors at once, use :ref:`set_anchors_preset<class_Control_set_anchors_preset>`.


Description
-----------

Base class for all User Interface or *UI* related nodes. ``Control`` features a bounding rectangle that defines its extents, an anchor position relative to its parent and margins that represent an offset to the anchor. The margins update automatically when the node, any of its parents, or the screen size change.

For more information on Godot's UI system, anchors, margins, and containers, see the related tutorials in the manual. To build flexible UIs, you'll need a mix of UI elements that inherit from ``Control`` and :ref:`Container<class_container>` nodes.

**User Interface nodes and input**

Godot sends input events to the scene's root node first, by calling :ref:`Node._input<class_Node__input>`. :ref:`Node._input<class_Node__input>` forwards the event down the node tree to the nodes under the mouse cursor, or on keyboard focus. To do so, it calls :ref:`MainLoop._input_event<class_MainLoop__input_event>`. Call :ref:`accept_event<class_Control_accept_event>` so no other node receives the event. Once you accepted an input, it becomes handled so :ref:`Node._unhandled_input<class_Node__unhandled_input>` will not process it.

Only one ``Control`` node can be in keyboard focus. Only the node in focus will receive keyboard events. To get the focus, call :ref:`grab_focus<class_Control_grab_focus>`. ``Control`` nodes lose focus when another node grabs it, or if you hide the node in focus.

Set :ref:`mouse_filter<class_Control_mouse_filter>` to MOUSE_FILTER_IGNORE to tell a ``Control`` node to ignore mouse or touch events. You'll need it if you place an icon on top of a button.

:ref:`Theme<class_theme>` resources change the Control's appearance. If you change the :ref:`Theme<class_theme>` on a ``Control`` node, it affects all of its children. To override some of the theme's parameters, call one of the ``add_*_override`` methods, like :ref:`add_font_override<class_Control_add_font_override>`. You can override the theme with the inspector.

Member Function Description
---------------------------

.. _class_Control__get_minimum_size:

- :ref:`Vector2<class_vector2>` **_get_minimum_size** **(** **)** virtual

Returns the minimum size this Control can shrink to. The node can never be smaller than this minimum size.

.. _class_Control__gui_input:

- void **_gui_input** **(** :ref:`InputEvent<class_inputevent>` event **)** virtual

The node's parent forwards input events to this method. Use it to process and accept inputs on UI elements. See :ref:`accept_event<class_Control_accept_event>`.

Replaces Godot 2's ``_input_event``.

.. _class_Control_accept_event:

- void **accept_event** **(** **)**

Marks an input event as handled. Once you accept an input event, it stops propagating, even to nodes listening to :ref:`Node._unhandled_input<class_Node__unhandled_input>` or :ref:`Node._unhandled_key_input<class_Node__unhandled_key_input>`.

.. _class_Control_add_color_override:

- void **add_color_override** **(** :ref:`String<class_string>` name, :ref:`Color<class_color>` color **)**

Overrides the color in the theme resource the node uses.

.. _class_Control_add_constant_override:

- void **add_constant_override** **(** :ref:`String<class_string>` name, :ref:`int<class_int>` constant **)**

Overrides an integer constant in the :ref:`Theme<class_theme>` resource the node uses. If the ``constant`` is invalid, Godot clears the override. See :ref:`Theme.INVALID_CONSTANT<class_Theme_INVALID_CONSTANT>` for more information.

.. _class_Control_add_font_override:

- void **add_font_override** **(** :ref:`String<class_string>` name, :ref:`Font<class_font>` font **)**

Overrides the ``name`` font in the theme resource the node uses. If ``font`` is empty, Godot clears the override.

.. _class_Control_add_icon_override:

- void **add_icon_override** **(** :ref:`String<class_string>` name, :ref:`Texture<class_texture>` texture **)**

Overrides the ``name`` icon in the theme resource the node uses. If ``icon`` is empty, Godot clears the override.

.. _class_Control_add_shader_override:

- void **add_shader_override** **(** :ref:`String<class_string>` name, :ref:`Shader<class_shader>` shader **)**

Overrides the ``name`` shader in the theme resource the node uses. If ``shader`` is empty, Godot clears the override.

.. _class_Control_add_stylebox_override:

- void **add_stylebox_override** **(** :ref:`String<class_string>` name, :ref:`StyleBox<class_stylebox>` stylebox **)**

Overrides the ``name`` Stylebox in the theme resource the node uses. If ``stylebox`` is empty, Godot clears the override.

.. _class_Control_can_drop_data:

- :ref:`bool<class_bool>` **can_drop_data** **(** :ref:`Vector2<class_vector2>` position, :ref:`Variant<class_variant>` data **)** virtual

Godot calls this method to test if ``data`` from a control's :ref:`get_drag_data<class_Control_get_drag_data>` can be dropped at ``position``. ``position`` is local to this control.

This method should only be used to test the data. Process the data in :ref:`drop_data<class_Control_drop_data>`.

::

    extends Control
    
    func can_drop_data(position, data):
        # check position if it is relevant to you
        # otherwise just check data
        return typeof(data) == TYPE_DICTIONARY and data.has('expected')

.. _class_Control_drop_data:

- void **drop_data** **(** :ref:`Vector2<class_vector2>` position, :ref:`Variant<class_variant>` data **)** virtual

Godot calls this method to pass you the ``data`` from a control's :ref:`get_drag_data<class_Control_get_drag_data>` result. Godot first calls :ref:`can_drop_data<class_Control_can_drop_data>` to test if ``data`` is allowed to drop at ``position`` where ``position`` is local to this control.

::

    extends ColorRect
    
    func can_drop_data(position, data):
        return typeof(data) == TYPE_DICTIONARY and data.has('color')
    
    func drop_data(position, data):
        color = data['color']

.. _class_Control_force_drag:

- void **force_drag** **(** :ref:`Variant<class_variant>` data, :ref:`Control<class_control>` preview **)**

Forces drag and bypasses :ref:`get_drag_data<class_Control_get_drag_data>` and :ref:`set_drag_preview<class_Control_set_drag_preview>` by passing ``data`` and ``preview``. Drag will start even if the mouse is neither over nor pressed on this control.

The methods :ref:`can_drop_data<class_Control_can_drop_data>` and :ref:`drop_data<class_Control_drop_data>` must be implemented on controls that want to receive drop data.

.. _class_Control_get_begin:

- :ref:`Vector2<class_vector2>` **get_begin** **(** **)** const

.. _class_Control_get_color:

- :ref:`Color<class_color>` **get_color** **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const

.. _class_Control_get_combined_minimum_size:

- :ref:`Vector2<class_vector2>` **get_combined_minimum_size** **(** **)** const

.. _class_Control_get_constant:

- :ref:`int<class_int>` **get_constant** **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const

.. _class_Control_get_cursor_shape:

- :ref:`int<class_int>` **get_cursor_shape** **(** :ref:`Vector2<class_vector2>` position=Vector2( 0, 0 ) **)** const

Returns the mouse cursor shape the control displays on mouse hover, one of the ``CURSOR_*`` constants.

.. _class_Control_get_drag_data:

- :ref:`Object<class_object>` **get_drag_data** **(** :ref:`Vector2<class_vector2>` position **)** virtual

Godot calls this method to get data that can be dragged and dropped onto controls that expect drop data. Return null if there is no data to drag. Controls that want to receive drop data should implement :ref:`can_drop_data<class_Control_can_drop_data>` and :ref:`drop_data<class_Control_drop_data>`. ``position`` is local to this control. Drag may be forced with :ref:`force_drag<class_Control_force_drag>`.

A preview that will follow the mouse that should represent the data can be set with :ref:`set_drag_preview<class_Control_set_drag_preview>`. A good time to set the preview is in this method.

::

    extends Control
    
    func get_drag_data(position):
        var mydata = make_data()
        set_drag_preview(make_preview(mydata))
        return mydata

.. _class_Control_get_end:

- :ref:`Vector2<class_vector2>` **get_end** **(** **)** const

Returns MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see :ref:`set_margin<class_Control_set_margin>`).

.. _class_Control_get_focus_owner:

- :ref:`Control<class_control>` **get_focus_owner** **(** **)** const

Return which control is owning the keyboard focus, or null if no one.

.. _class_Control_get_font:

- :ref:`Font<class_font>` **get_font** **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const

.. _class_Control_get_global_rect:

- :ref:`Rect2<class_rect2>` **get_global_rect** **(** **)** const

Return position and size of the Control, relative to the top-left corner of the *window* Control. This is a helper (see :ref:`get_global_position<class_Control_get_global_position>`, :ref:`get_size<class_Control_get_size>`).

.. _class_Control_get_icon:

- :ref:`Texture<class_texture>` **get_icon** **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const

.. _class_Control_get_minimum_size:

- :ref:`Vector2<class_vector2>` **get_minimum_size** **(** **)** const

Return the minimum size this Control can shrink to. A control will never be displayed or resized smaller than its minimum size.

.. _class_Control_get_parent_area_size:

- :ref:`Vector2<class_vector2>` **get_parent_area_size** **(** **)** const

.. _class_Control_get_parent_control:

- :ref:`Control<class_control>` **get_parent_control** **(** **)** const

.. _class_Control_get_rect:

- :ref:`Rect2<class_rect2>` **get_rect** **(** **)** const

Return position and size of the Control, relative to the top-left corner of the parent Control. This is a helper (see :ref:`get_position<class_Control_get_position>`, :ref:`get_size<class_Control_get_size>`).

.. _class_Control_get_rotation:

- :ref:`float<class_float>` **get_rotation** **(** **)** const

Return the rotation (in radians)

.. _class_Control_get_stylebox:

- :ref:`StyleBox<class_stylebox>` **get_stylebox** **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const

.. _class_Control_get_tooltip:

- :ref:`String<class_string>` **get_tooltip** **(** :ref:`Vector2<class_vector2>` at_position=Vector2( 0, 0 ) **)** const

Return the tooltip, which will appear when the cursor is resting over this control.

.. _class_Control_grab_click_focus:

- void **grab_click_focus** **(** **)**

.. _class_Control_grab_focus:

- void **grab_focus** **(** **)**

Steal the focus from another control and become the focused control (see :ref:`set_focus_mode<class_Control_set_focus_mode>`).

.. _class_Control_has_color:

- :ref:`bool<class_bool>` **has_color** **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const

.. _class_Control_has_color_override:

- :ref:`bool<class_bool>` **has_color_override** **(** :ref:`String<class_string>` name **)** const

.. _class_Control_has_constant:

- :ref:`bool<class_bool>` **has_constant** **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const

.. _class_Control_has_constant_override:

- :ref:`bool<class_bool>` **has_constant_override** **(** :ref:`String<class_string>` name **)** const

.. _class_Control_has_focus:

- :ref:`bool<class_bool>` **has_focus** **(** **)** const

Return whether the Control is the current focused control (see :ref:`set_focus_mode<class_Control_set_focus_mode>`).

.. _class_Control_has_font:

- :ref:`bool<class_bool>` **has_font** **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const

.. _class_Control_has_font_override:

- :ref:`bool<class_bool>` **has_font_override** **(** :ref:`String<class_string>` name **)** const

.. _class_Control_has_icon:

- :ref:`bool<class_bool>` **has_icon** **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const

.. _class_Control_has_icon_override:

- :ref:`bool<class_bool>` **has_icon_override** **(** :ref:`String<class_string>` name **)** const

.. _class_Control_has_point:

- :ref:`bool<class_bool>` **has_point** **(** :ref:`Vector2<class_vector2>` point **)** virtual

.. _class_Control_has_shader_override:

- :ref:`bool<class_bool>` **has_shader_override** **(** :ref:`String<class_string>` name **)** const

.. _class_Control_has_stylebox:

- :ref:`bool<class_bool>` **has_stylebox** **(** :ref:`String<class_string>` name, :ref:`String<class_string>` type="" **)** const

.. _class_Control_has_stylebox_override:

- :ref:`bool<class_bool>` **has_stylebox_override** **(** :ref:`String<class_string>` name **)** const

.. _class_Control_minimum_size_changed:

- void **minimum_size_changed** **(** **)**

.. _class_Control_release_focus:

- void **release_focus** **(** **)**

Give up the focus, no other control will be able to receive keyboard input.

.. _class_Control_set_anchor:

- void **set_anchor** **(** :ref:`int<class_int>` margin, :ref:`float<class_float>` anchor, :ref:`bool<class_bool>` keep_margin=false, :ref:`bool<class_bool>` push_opposite_anchor=true **)**

.. _class_Control_set_anchor_and_margin:

- void **set_anchor_and_margin** **(** :ref:`int<class_int>` margin, :ref:`float<class_float>` anchor, :ref:`float<class_float>` offset, :ref:`bool<class_bool>` push_opposite_anchor=false **)**

.. _class_Control_set_anchors_and_margins_preset:

- void **set_anchors_and_margins_preset** **(** :ref:`int<class_int>` preset, :ref:`int<class_int>` resize_mode=0, :ref:`int<class_int>` margin=0 **)**

.. _class_Control_set_anchors_preset:

- void **set_anchors_preset** **(** :ref:`int<class_int>` preset, :ref:`bool<class_bool>` keep_margin=false **)**

.. _class_Control_set_begin:

- void **set_begin** **(** :ref:`Vector2<class_vector2>` position **)**

Sets MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see :ref:`set_margin<class_Control_set_margin>`).

.. _class_Control_set_drag_forwarding:

- void **set_drag_forwarding** **(** :ref:`Control<class_control>` target **)**

Forwards the handling of this control's drag and drop to ``target`` control.

Forwarding can be implemented in the target control similar to the methods :ref:`get_drag_data<class_Control_get_drag_data>`, :ref:`can_drop_data<class_Control_can_drop_data>`, and :ref:`drop_data<class_Control_drop_data>` but with two differences:

1. The function name must be suffixed with **_fw**

2. The function must take an extra argument that is the control doing the forwarding

::

    # ThisControl.gd
    extends Control
    func _ready():
        set_drag_forwarding(target_control)
    
    # TargetControl.gd
    extends Control
    func can_drop_data_fw(position, data, from_control):
        return true
    
    func drop_data_fw(position, data, from_control):
        my_handle_data(data)
    
    func get_drag_data_fw(position, from_control):
        set_drag_preview(my_preview)
        return my_data()

.. _class_Control_set_drag_preview:

- void **set_drag_preview** **(** :ref:`Control<class_control>` control **)**

Shows the given control at the mouse pointer. A good time to call this method is in :ref:`get_drag_data<class_Control_get_drag_data>`.

.. _class_Control_set_end:

- void **set_end** **(** :ref:`Vector2<class_vector2>` position **)**

Sets MARGIN_RIGHT and MARGIN_BOTTOM at the same time. This is a helper (see :ref:`set_margin<class_Control_set_margin>`).

.. _class_Control_set_margins_preset:

- void **set_margins_preset** **(** :ref:`int<class_int>` preset, :ref:`int<class_int>` resize_mode=0, :ref:`int<class_int>` margin=0 **)**

.. _class_Control_set_rotation:

- void **set_rotation** **(** :ref:`float<class_float>` radians **)**

Set the rotation (in radians).

.. _class_Control_show_modal:

- void **show_modal** **(** :ref:`bool<class_bool>` exclusive=false **)**

Display a Control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.

.. _class_Control_warp_mouse:

- void **warp_mouse** **(** :ref:`Vector2<class_vector2>` to_position **)**


